/*
  Purpose: This file serves as the documentation for a basic Express framework server with two endpoints, one for handling GET requests and one for handling POST requests.
  Author(s): 
Group Leader: Muhammad Arham Mussawar  A00478275
Muhammad Asfand Yar Khan  A00465145
Muttyeb Tahir  A00471177
Subhan Nadeem  A00469690

  Note: You must run "npm install express" once in the public_html
        folder first. You do not need to repeat this step for
        different servers.
*/

// Importing the Express framework and making it accessible via the reference
const express = require("express");

// Defining the top level Express function
const server = express();

// Setting the port where the server listens for clients
const port = 3026;

// Enabling the server to recognize JSON format
server.use(express.json());

// Enabling incoming "name":"value" pairs to be any type including arrays
server.use(express.urlencoded({ extended: true }));

/*
  Purpose: This function allows requests from any origin to access this site's content,
  allows only GET and POST requests, and accepts requests that include "Content-Type".
  Parameters:
    - req: request object generated by the HTTP event
    - res: response object generated by the HTTP event
    - next: predefined function used when request/response cycle is not terminated
*/
const allowCrossDomain = function (req, res, next) {
  // Allow any origin
  res.header("Access-Control-Allow-Origin", "*");
  // Allow any method
  res.header("Access-Control-Allow-Methods", "GET,POST");
  // Accept only headers with Content-Type included
  res.header("Access-Control-Allow-Headers", "Content-Type");
  // Since this middleware function does not terminate the request/response cycle,
  // the next() function must be called to continue to the succeeding middleware function
  next();
};

// Set domain characteristics defined above
server.use(allowCrossDomain);

/*
  Purpose: This function responds to a POST request with relative endpoint: /myPost.
  Parameters:
    - req: request object generated by the HTTP event
    - res: response object generated by the HTTP event
*/
server.post("/myPost", function (req, res) {
  // Assuming the personal_Info is sent in the request body
  const personalInfoData = req.body.personal_Info;
  return res.status(200).send(personalInfoData);
});

server.get("/myGet", function (req, res) {
  let obj = { personal_Info: personalInfoData };
  console.log(obj);
  return res.status(200).send(obj);
});

/*
  Purpose: This function produces a message on the Node.js console, indicating the server has begun to listen for clients on a port.
*/
server.listen(port, function () {
  console.log("Listening on port 3026");
});

